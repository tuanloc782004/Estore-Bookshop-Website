package com.estorebookshop.controller.user;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.estorebookshop.config.model.CustomUserDetails;
import com.estorebookshop.model.Address;
import com.estorebookshop.model.Cart;
import com.estorebookshop.model.CartItem;
import com.estorebookshop.model.User;
import com.estorebookshop.model.Order;
import com.estorebookshop.model.OrderDetail;
import com.estorebookshop.service.AddressService;
import com.estorebookshop.service.CartItemService;
import com.estorebookshop.service.CartService;
import com.estorebookshop.service.OrderDetailService;
import com.estorebookshop.service.OrderService;
import com.estorebookshop.service.UserService;

@Controller
@RequestMapping("/user/cart")
public class MyCartController {

	@Autowired
	private UserService userService;

	@Autowired
	private CartService cartService;

	@Autowired
	private CartItemService cartItemService;

	@Autowired
	private AddressService addressService;
	
	@Autowired
	private OrderService orderService;
	
	@Autowired
	private OrderDetailService orderDetailService;

	@RequestMapping("")
	public String cart(Model model, RedirectAttributes redirectAttributes) {

		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;
		if (principal instanceof CustomUserDetails) {
			username = ((CustomUserDetails) principal).getUsername();
		} else {
			username = principal.toString();
		}

		User user = this.userService.findByUsername(username);

		Cart cart = this.cartService.findByUserId(user.getId());

		List<CartItem> cartItems = cartItemService.findAllByCartId(cart.getId());
		List<Address> addresses = this.addressService.findByUser(user);

		model.addAttribute("cartItems", cartItems);
		model.addAttribute("addresses", addresses);

		return "user/cart";

	}

	@PostMapping("/update")
	public String update(@RequestParam Map<String, String> quantities,
			RedirectAttributes redirectAttributes) {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;
		if (principal instanceof CustomUserDetails) {
			username = ((CustomUserDetails) principal).getUsername();
		} else {
			username = principal.toString();
		}

		User user = this.userService.findByUsername(username);

		Cart cart = this.cartService.findByUserId(user.getId());

		List<CartItem> cartItems = cartItemService.findAllByCartId(cart.getId());

		try {
			for (CartItem cartItem : cartItems) {
				String quantityStr = quantities.get("quantities[" + cartItem.getId() + "]");
				if (quantityStr != null) {
					Long quantity = Long.parseLong(quantityStr);
					cartItem.setQuantity(quantity);
				}
			}

			this.cartItemService.saveCartItems(cartItems);

			redirectAttributes.addFlashAttribute("message", "Cart updated successfully!");
		} catch (Exception e) {
			redirectAttributes.addFlashAttribute("error", "Error updating cart: " + e.getMessage());
		}

		return "redirect:/user/cart";
	}

	@PostMapping("/pay")
	public String pay(@RequestParam Map<String, String> quantities, @RequestParam("addressId") Long addressId, @RequestParam("note") String note,
			RedirectAttributes redirectAttributes) {
		if (addressId == null || note == null) {
			redirectAttributes.addFlashAttribute("error", "Fill in all information");
			return "redirect:/user/cart";
		}
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;
		if (principal instanceof CustomUserDetails) {
			username = ((CustomUserDetails) principal).getUsername();
		} else {
			username = principal.toString();
		}

		User user = this.userService.findByUsername(username);

		Cart cart = this.cartService.findByUserId(user.getId());

		List<CartItem> cartItems = cartItemService.findAllByCartId(cart.getId());

		try {
			for (CartItem cartItem : cartItems) {
				String quantityStr = quantities.get("quantities[" + cartItem.getId() + "]");
				if (quantityStr != null) {
					Long quantity = Long.parseLong(quantityStr);
					cartItem.setQuantity(quantity);
				}
			}

			this.cartItemService.saveCartItems(cartItems);
		} catch (Exception e) {
			redirectAttributes.addFlashAttribute("error", "Error updating cart: " + e.getMessage());
			return "redirect:/user/cart";
		}
		
		List<CartItem> cartItems2 = cartItemService.findAllByCartId(cart.getId());
		Order order = new Order();
		order.setAddress(this.addressService.findById(addressId));
		order.setCreatedAt(LocalDateTime.now());
		order.setStatus("Pending");
		order.setUser(user);
		order.setNote(note);
		order.setPaymentMethod("COD");
		
		try {
		    BigDecimal totalPrice = BigDecimal.ZERO; 

		    List<OrderDetail> orderDetails = new ArrayList<>(); 

		    for (CartItem cartItem : cartItems2) {
		        OrderDetail orderDetail = new OrderDetail();
		        orderDetail.setBook(cartItem.getBook()); 
		        orderDetail.setQuantity(cartItem.getQuantity()); 
		        
		        BigDecimal itemTotal = cartItem.getBook().getPrice().multiply(BigDecimal.valueOf(cartItem.getQuantity()));
		        orderDetail.setPrice(itemTotal); 

		        totalPrice = totalPrice.add(itemTotal);

		        orderDetails.add(orderDetail);
		    }

		    order.setTotalPrice(totalPrice);

		    this.orderService.save(order);
		    
		    // Lưu danh sách chi tiết đơn hàng
		    for (OrderDetail orderDetail : orderDetails) {
		        orderDetail.setOrder(order);
		        this.orderDetailService.save(orderDetail);
		    }

		    // Xóa giỏ hàng sau khi đặt hàng thành công
		    this.cartItemService.deleteByCartId(cart.getId());

		    redirectAttributes.addFlashAttribute("success", "Order placed successfully!");
		} catch (Exception e) {
		    redirectAttributes.addFlashAttribute("error", "Error placing order: " + e.getMessage());
		    return "redirect:/user/cart";
		}

		return "redirect:/user/order";

	}

}
