package com.estorebookshop.controller.user;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Set;

import org.antlr.v4.runtime.misc.Array2DHashSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.estorebookshop.config.model.CustomUserDetails;
import com.estorebookshop.model.Address;
import com.estorebookshop.model.Book;
import com.estorebookshop.model.BookCategory;
import com.estorebookshop.model.BookImage;
import com.estorebookshop.model.Category;
import com.estorebookshop.model.User;
import com.estorebookshop.service.AddressService;
import com.estorebookshop.service.UserService;

@Controller
@RequestMapping("/user/address")
public class MyAddressController {

	@Autowired
	private UserService userService;
	
	@Autowired
	private AddressService addressService;
	
	@RequestMapping("")
	public String adress(Model model) {
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;
		if (principal instanceof CustomUserDetails) {
			username = ((CustomUserDetails) principal).getUsername();
		} else {
			username = principal.toString();
		}

		User user = this.userService.findByUsername(username);
		
		List<Address> addresses = this.addressService.findByUser(user);
				
		if (addresses != null) {
			model.addAttribute("addresses", addresses);
		} else {
			model.addAttribute("error", "Addrress not found!");
		}

		return "user/address";
	}
	
	@PostMapping("/add")
	public String create(@ModelAttribute("book") Book book, @RequestParam List<Long> categoryIds,
			@RequestParam("files") MultipartFile[] files, RedirectAttributes redirectAttributes) {

		book.setRating(BigDecimal.valueOf(0.00));

		// Lưu sách với các thay đổi
		this.bookService.save(book);

		// Cập nhật danh mục sách
		List<Category> selectedCategories = this.categoryService.findAllById(categoryIds);

		for (Category category : selectedCategories) {
			BookCategory bookCategory = new BookCategory();
			bookCategory.setBook(book);
			bookCategory.setCategory(category);
			this.bookCategoryService.save(bookCategory); // Lưu các mối quan hệ mới
		}

		// Thêm ảnh mới
		Set<BookImage> newImageEntities = new Array2DHashSet<BookImage>();
		for (MultipartFile file : files) {
			if (!file.isEmpty()) {
				// Đặt tên cho file ảnh mới
				String imageUrl = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")) + "_"
						+ file.getOriginalFilename();
				this.storageService.store(file, imageUrl); // Lưu ảnh mới với tên đã tạo

				BookImage bookImage = new BookImage();
				bookImage.setImageUrl("/upload-dir/" + imageUrl); // Lưu đường dẫn ảnh
				bookImage.setBook(book); // Liên kết ảnh với sách
				this.bookImageService.save(bookImage);
				newImageEntities.add(bookImage);
			}
		}

		// Cập nhật ảnh mới vào sách
		book.setBookImages(newImageEntities);

		redirectAttributes.addFlashAttribute("message", "Book updated successfully!");

		return "redirect:/admin/book";
	}
	
}
