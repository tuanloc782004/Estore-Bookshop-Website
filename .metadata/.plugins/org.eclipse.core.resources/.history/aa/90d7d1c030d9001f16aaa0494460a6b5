package com.estorebookshop.controller.user;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.estorebookshop.config.model.CustomUserDetails;
import com.estorebookshop.dto.CartItemDTO;
import com.estorebookshop.model.Address;
import com.estorebookshop.model.Book;
import com.estorebookshop.model.Cart;
import com.estorebookshop.model.CartItem;
import com.estorebookshop.model.User;
import com.estorebookshop.service.AddressService;
import com.estorebookshop.service.BookService;
import com.estorebookshop.service.CartItemService;
import com.estorebookshop.service.CartService;
import com.estorebookshop.service.UserService;

@Controller
@RequestMapping("/user/cart")
public class MyCartController {

	@Autowired
	private UserService userService;

	@Autowired
	private CartService cartService;

	@Autowired
	private CartItemService cartItemService;

	@Autowired
	private AddressService addressService;

	@Autowired
	private BookService bookService;

	@RequestMapping("")
	public String cart(Model model, RedirectAttributes redirectAttributes) {

		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;
		if (principal instanceof CustomUserDetails) {
			username = ((CustomUserDetails) principal).getUsername();
		} else {
			username = principal.toString();
		}

		User user = this.userService.findByUsername(username);

		Cart cart = this.cartService.findByUserId(user.getId());

		List<CartItem> cartItems = cartItemService.findAllByCartId(cart.getId());
		List<Address> addresses = this.addressService.findByUser(user);

		model.addAttribute("cartItems", cartItems);
		model.addAttribute("addresses", addresses);

		return "user/cart";

	}

	@PostMapping("/update")
	public String updateCart(@RequestBody List<CartItemDTO> updatedCartItems, Model model,
			RedirectAttributes redirectAttributes) {

		// Tạo Logger
		Logger logger = LoggerFactory.getLogger(getClass());

		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;

		if (principal instanceof CustomUserDetails) {
			username = ((CustomUserDetails) principal).getUsername();
			logger.info("Updating cart for user: {}", username); // Ghi log khi xác định tên người dùng
		} else {
			username = principal.toString();
			logger.info("Updating cart for user: {}", username); // Ghi log khi xác định tên người dùng
		}

		User user = this.userService.findByUsername(username);
		if (user == null) {
			logger.error("User not found: {}", username); // Ghi log nếu không tìm thấy người dùng
			redirectAttributes.addFlashAttribute("error", "User not found.");
			return "redirect:/user/cart";
		}

		Cart cart = this.cartService.findByUserId(user.getId());
		if (cart == null) {
			logger.error("Cart not found for user: {}", username); // Ghi log nếu không tìm thấy giỏ hàng
			redirectAttributes.addFlashAttribute("error", "Cart not found.");
			return "redirect:/user/cart";
		}

		List<CartItem> list = new ArrayList<CartItem>();

		try {
			for (CartItemDTO dto : updatedCartItems) {
				Book book = this.bookService.findById(dto.getBookId());
				CartItem existingCartItem = cartItemService.findByCartAndBook(cart, book);

				if (existingCartItem != null) {
					logger.info("Updating cart item for book: {} with quantity: {}", book.getTitle(),
							dto.getQuantity()); // Log khi cập nhật cart item
					existingCartItem.setQuantity(dto.getQuantity());
					list.add(existingCartItem);
				} else {
					logger.warn("Cart item not found for book: {}", book.getTitle()); // Log nếu không tìm thấy cart
																						// item
				}
			}

			cartItemService.saveCartItems(list);

			// Log khi cập nhật giỏ hàng thành công
			logger.info("Cart updated successfully for user: {}", username);

			List<CartItem> cartItems = cartItemService.findAllByCartId(cart.getId());
			List<Address> addresses = this.addressService.findByUser(user);

			model.addAttribute("cartItems", cartItems);
			model.addAttribute("addresses", addresses);

			redirectAttributes.addFlashAttribute("message", "Cart updated successfully!");
		} catch (Exception e) {
			logger.error("Error updating cart: {}", e.getMessage(), e); // Log lỗi nếu có
			redirectAttributes.addFlashAttribute("error", "Error updating cart: " + e.getMessage());
		}

		return "redirect:/user/cart";
	}
}
