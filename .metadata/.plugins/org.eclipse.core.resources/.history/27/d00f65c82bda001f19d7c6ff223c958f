package com.estorebookshop.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.estorebookshop.config.service.EmailService;
import com.estorebookshop.model.User;
import com.estorebookshop.service.UserService;

@Controller
@RequestMapping("/register")
public class RegisterController {

	@Autowired
	private UserService userService;

	@GetMapping("")
	public String showRegisterForm(Model model) {
		model.addAttribute("user", new User());
		return "auth/register";
	}

	@PostMapping("")
	public String register(@RequestParam("username") String username, @RequestParam("password") String password,
			@RequestParam("rePassword") String rePassword, @RequestParam("email") String email,
			@RequestParam("phoneNumber") String phoneNumber, RedirectAttributes redirectAttributes) {
		try {
			// Check if passwords match
			if (!password.equals(rePassword)) {
				redirectAttributes.addFlashAttribute("errorMessage", "Passwords do not match.");
				return "redirect:/register";
			}

			// Check for duplicate username, email, or phone number
			if (userService.existsByUsername(username)) {
				redirectAttributes.addFlashAttribute("errorMessage",
						"Username already exists. Please choose a different username.");
				return "redirect:/register";
			}

			if (userService.existsByEmail(email)) {
				redirectAttributes.addFlashAttribute("errorMessage",
						"Email already exists. Please use a different email.");
				return "redirect:/register";
			}

			if (userService.existsByPhoneNumber(phoneNumber)) {
				redirectAttributes.addFlashAttribute("errorMessage",
						"Phone number already exists. Please use a different phone number.");
				return "redirect:/register";
			}

			// Create new user and save
			User user = new User();
			user.setUsername(username);
			user.setPassword(password); // Ensure password is hashed in `UserService`
			user.setEmail(email);
			user.setPhoneNumber(phoneNumber);
			user.setEnabled(true); // Account is enabled by default
			userService.save(user);

			redirectAttributes.addFlashAttribute("successMessage", "Registration successful! You can now log in.");
			return "redirect:/login";
		} catch (Exception e) {
			redirectAttributes.addFlashAttribute("errorMessage", "An error occurred during registration.");
			return "redirect:/register";
		}
	}
}