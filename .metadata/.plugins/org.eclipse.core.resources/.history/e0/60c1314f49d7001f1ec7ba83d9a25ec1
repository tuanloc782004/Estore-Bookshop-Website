package com.estorebookshop.controller.user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.view.RedirectView;

import com.paypal.api.payments.Amount;
import com.paypal.api.payments.Payer;
import com.paypal.api.payments.Payment;
import com.paypal.api.payments.PaymentExecution;
import com.paypal.api.payments.RedirectUrls;
import com.paypal.api.payments.Transaction;
import com.paypal.base.rest.APIContext;
import com.paypal.base.rest.PayPalRESTException;

@RestController
@RequestMapping("/user/paypal")
public class PayPalController {

	@Autowired
	private APIContext apiContext;

	@PostMapping("/pay")
	public RedirectView pay(@RequestParam("price") double price) {
		Amount amount = new Amount();
		amount.setCurrency("USD");
		amount.setTotal(String.format("%.2f", price));

		Transaction transaction = new Transaction();
		transaction.setAmount(amount);
		transaction.setDescription("Book purchase");

		Payer payer = new Payer();
		payer.setPaymentMethod("paypal");

		Payment payment = new Payment();
		payment.setIntent("sale");
		payment.setPayer(payer);
		payment.setTransactions(Collections.singletonList(transaction));

		RedirectUrls redirectUrls = new RedirectUrls();
		redirectUrls.setCancelUrl("http://localhost:8080/paypal/cancel");
		redirectUrls.setReturnUrl("http://localhost:8080/paypal/success");
		payment.setRedirectUrls(redirectUrls);

		try {
			Payment createdPayment = payment.create(apiContext);

			// Lấy approval link từ danh sách links
			String approvalLink = createdPayment.getLinks().stream()
					.filter(link -> link.getRel().equals("approval_url")).map(Link::getHref) // Link là lớp chứa href
					.findFirst().orElseThrow(() -> new PayPalRESTException("Approval URL not found"));

			return new RedirectView(approvalLink);
		} catch (PayPalRESTException e) {
			e.printStackTrace();
			return new RedirectView("/paypal/error");
		}
	}

	@GetMapping("/success")
	public String success(@RequestParam("paymentId") String paymentId, @RequestParam("PayerID") String payerId) {
		try {
			Payment payment = Payment.get(apiContext, paymentId);
			PaymentExecution paymentExecution = new PaymentExecution();
			paymentExecution.setPayerId(payerId);
			Payment executedPayment = payment.execute(apiContext, paymentExecution);
			return "Payment successful: " + executedPayment.toJSON();
		} catch (PayPalRESTException e) {
			e.printStackTrace();
			return "Payment failed.";
		}
	}

	@GetMapping("/cancel")
	public String cancel() {
		return "Payment canceled.";
	}
}
